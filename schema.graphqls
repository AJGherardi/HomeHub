type DeviceResponse {
  addr: Int!
  device: Device
}

type ElementResponse {
  addr: Int!
  element: Element
}

type GroupResponse {
  addr: Int!
  group: Group
}

type SceneResponse {
  number: Int!
  scene: Scene
}

type Device {
  type: String!
  elements: [ElementResponse!]!
}

type Element {
  name: String!
  state: String!
  stateType: String!
}

type Group {
  name: String!
  scenes: [SceneResponse]!
  devices: [DeviceResponse]!
}

type Scene {
  name: String!
}

type Mutation {
  configHub: String!
  resetHub: Boolean!
  addDevice(groupAddr: Int!, devUUID: String!, name: String!): Int!
  removeDevice(devAddr: Int!, groupAddr: Int!): Int!
  addGroup(name: String!): Int!
  removeGroup(groupAddr: Int!): Int!
  addUser: String!
  setState(groupAddr: Int! ,elemAddr: Int!, value: String!): Boolean!
  sceneStore(name: String! ,groupAddr: Int!): Int!
  sceneRecall(sceneNumber: Int!, groupAddr: Int!): Int!
  sceneDelete(sceneNumber: Int!, groupAddr: Int!): Int!
  eventBind(sceneNumber: Int!, groupAddr: Int!, devAddr: Int!, elemAddr: Int!): Int!
}

type Query {
  availableDevices: [String!]!
  availableGroups: [GroupResponse]
  getUserPin: Int!
}

type Subscription {
  watchGroup(groupAddr: Int!): GroupResponse
  watchState(groupAddr: Int!, devAddr: Int!, elemAddr: Int!): String!
  watchEvents: Int!
}

schema {
  query: Query
  mutation: Mutation
}