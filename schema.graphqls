type Device {
  addr: String!
  type: String!
  elements: [Element!]!
}

type Element {
  name: String!
  addr: String!
  state: String!
  stateType: String!
}

type Group {
  addr: String!
  name: String!
  scenes: [Scene]!
  devAddrs: [String!]!
}

type Scene {
  name: String!
  number: String!
}

type Mutation {
  addDevice(addr: String!, devUUID: String!, name: String!): Device!
  removeDevice(addr: String!): Device!
  removeGroup(addr: String!): Group!
  addGroup(name: String!): Group!
  configHub: String!
  resetHub: Boolean!
  setState(addr: String!, value: String!): Boolean!
  sceneStore(name: String! ,addr: String!): String!
  sceneRecall(sceneNumber: String!, addr: String!): String!
  sceneDelete(sceneNumber: String!, addr: String!): String!
  eventBind(sceneNumber: String!, groupAddr: String!, elemAddr: String!): String!
  addUser: String!
}

type Query {
  availableDevices: [String!]!
  availableGroups: [Group]
  getUserPin: Int!
}

type Subscription {
  listGroup(addr: String!): ListGroupResponse
  getState(addr: String!): String!
  getEvents: String!
}

type ListGroupResponse {
  devices: [Device!]!
  scenes: [Scene!]!
}

schema {
    query: Query
    mutation: Mutation
}